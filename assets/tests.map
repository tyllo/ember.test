{"version":3,"sources":["frontend/tests/adapters/application.jshint.js","frontend/tests/app.jshint.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/destroy-app.jshint.js","frontend/tests/helpers/format-currency.jshint.js","frontend/tests/helpers/is-equal-by-modul.jshint.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/module-for-acceptance.jshint.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/resolver.jshint.js","frontend/tests/helpers/start-app.js","frontend/tests/helpers/start-app.jshint.js","frontend/tests/integration/pods/components/app-input/component-test.js","frontend/tests/integration/pods/components/app-input/component-test.jshint.js","frontend/tests/integration/pods/components/app-pagination/component-test.js","frontend/tests/integration/pods/components/app-pagination/component-test.jshint.js","frontend/tests/integration/pods/components/filter-sort/component-test.js","frontend/tests/integration/pods/components/filter-sort/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-block/component-test.js","frontend/tests/integration/pods/components/filter-toggle-block/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-memory/component-test.js","frontend/tests/integration/pods/components/filter-toggle-memory/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-price/component-test.js","frontend/tests/integration/pods/components/filter-toggle-price/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-size/component-test.js","frontend/tests/integration/pods/components/filter-toggle-size/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-ssd/component-test.js","frontend/tests/integration/pods/components/filter-toggle-ssd/component-test.jshint.js","frontend/tests/integration/pods/components/filter-toggle-vendor/component-test.js","frontend/tests/integration/pods/components/filter-toggle-vendor/component-test.jshint.js","frontend/tests/integration/pods/components/product-ballons/component-test.js","frontend/tests/integration/pods/components/product-ballons/component-test.jshint.js","frontend/tests/integration/pods/components/product-filter/component-test.js","frontend/tests/integration/pods/components/product-filter/component-test.jshint.js","frontend/tests/integration/pods/components/product-list/component-test.js","frontend/tests/integration/pods/components/product-list/component-test.jshint.js","frontend/tests/integration/pods/components/product-list-item/component-test.js","frontend/tests/integration/pods/components/product-list-item/component-test.jshint.js","frontend/tests/integration/pods/components/product-nav/component-test.js","frontend/tests/integration/pods/components/product-nav/component-test.jshint.js","frontend/tests/integration/pods/components/product-rating/component-test.js","frontend/tests/integration/pods/components/product-rating/component-test.jshint.js","frontend/tests/models/notebook.jshint.js","frontend/tests/pods/components/app-input/component.jshint.js","frontend/tests/pods/components/app-pagination/component.jshint.js","frontend/tests/pods/components/filter-sort/component.jshint.js","frontend/tests/pods/components/filter-toggle-block/component.jshint.js","frontend/tests/pods/components/filter-toggle-memory/component.jshint.js","frontend/tests/pods/components/filter-toggle-price/component.jshint.js","frontend/tests/pods/components/filter-toggle-size/component.jshint.js","frontend/tests/pods/components/filter-toggle-ssd/component.jshint.js","frontend/tests/pods/components/filter-toggle-vendor/component.jshint.js","frontend/tests/pods/components/product-ballons/component.jshint.js","frontend/tests/pods/components/product-filter/component.jshint.js","frontend/tests/pods/components/product-list/component.jshint.js","frontend/tests/pods/components/product-list-item/component.jshint.js","frontend/tests/pods/components/product-nav/component.jshint.js","frontend/tests/pods/components/product-rating/component.jshint.js","frontend/tests/pods/index/controller.jshint.js","frontend/tests/pods/index/route.jshint.js","frontend/tests/resolver.jshint.js","frontend/tests/router.jshint.js","frontend/tests/test-helper.js","frontend/tests/test-helper.jshint.js","frontend/tests/unit/adapters/application-test.js","frontend/tests/unit/adapters/application-test.jshint.js","frontend/tests/unit/helpers/format-currency-test.js","frontend/tests/unit/helpers/format-currency-test.jshint.js","frontend/tests/unit/helpers/is-equal-by-modul-test.js","frontend/tests/unit/helpers/is-equal-by-modul-test.jshint.js","frontend/tests/unit/models/notebook-test.js","frontend/tests/unit/models/notebook-test.jshint.js","frontend/tests/unit/pods/index/controller-test.js","frontend/tests/unit/pods/index/controller-test.jshint.js","frontend/tests/unit/pods/index/route-test.js","frontend/tests/unit/pods/index/route-test.jshint.js","frontend/tests/unit/utils/input-tel-test.js","frontend/tests/unit/utils/input-tel-test.jshint.js","frontend/tests/utils/input-tel.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('frontend/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('frontend/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/format-currency.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/format-currency.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-currency.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/is-equal-by-modul.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/is-equal-by-modul.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal-by-modul.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _frontendTestsHelpersStartApp, _frontendTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _frontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _frontendTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('frontend/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/resolver', ['exports', 'ember-resolver', 'frontend/config/environment'], function (exports, _emberResolver, _frontendConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _frontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _frontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('frontend/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/start-app', ['exports', 'ember', 'frontend/app', 'frontend/config/environment'], function (exports, _ember, _frontendApp, _frontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _frontendConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _frontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('frontend/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/app-input/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var CLASS_NAME = 'app-input--helper';\n\n  (0, _emberQunit.moduleForComponent)('app-input', 'Integration | Component | app input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'app-input', ['loc', [null, [1, 0], [1, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('label.app-input').length);\n  });\n\n  (0, _emberQunit.test)('it should render template block', function (assert) {\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'app-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 18]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('it should set modifer on class', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'app-input', ['loc', [null, [1, 0], [1, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.' + CLASS_NAME).length);\n\n    this.set('modifer', 'modifer');\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 40\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'app-input', [], ['modifer', ['subexpr', 'readonly', [['get', 'modifer', ['loc', [null, [1, 30], [1, 37]]]]], [], ['loc', [null, [1, 20], [1, 38]]]]], ['loc', [null, [1, 0], [1, 40]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.' + CLASS_NAME + '__modifer').length);\n  });\n});","define('frontend/tests/integration/pods/components/app-input/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/app-input/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/app-input/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/app-pagination/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('app-pagination', 'Integration | Component | app pagination', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'app-pagination', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('nav.pagination').length);\n  });\n\n  (0, _emberQunit.test)('it should set pages', function (assert) {\n    this.set('total', 10);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'app-pagination', [], ['total', ['subexpr', 'readonly', [['get', 'total', ['loc', [null, [1, 33], [1, 38]]]]], [], ['loc', [null, [1, 23], [1, 39]]]]], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$('.pagination--link').length, 10);\n  });\n});","define('frontend/tests/integration/pods/components/app-pagination/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/app-pagination/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/app-pagination/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-sort/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-sort', 'Integration | Component | filter sort', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.set('name', 'sort name');\n      this.set('direction', 'asc');\n      this.set('sortName', 'sortName');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [2, 23], [2, 27]]]]], [], ['loc', [null, [2, 11], [2, 28]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [3, 21], [3, 30]]]]], [], ['loc', [null, [3, 16], [3, 31]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [4, 20], [4, 28]]]]], [], ['loc', [null, [4, 15], [4, 29]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('it should set text', function (assert) {\n    this.set('text', 'template block text');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['text', ['subexpr', 'readonly', [['get', 'text', ['loc', [null, [2, 21], [2, 25]]]]], [], ['loc', [null, [2, 11], [2, 26]]]], 'name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [3, 21], [3, 25]]]]], [], ['loc', [null, [3, 11], [3, 26]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [4, 21], [4, 30]]]]], [], ['loc', [null, [4, 16], [4, 31]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [5, 20], [5, 28]]]]], [], ['loc', [null, [5, 15], [5, 29]]]]], ['loc', [null, [1, 0], [6, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('it should set sort-up on asc', function (assert) {\n    this.set('name', 'sort name');\n    this.set('sortName', 'sort name');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [2, 21], [2, 25]]]]], [], ['loc', [null, [2, 11], [2, 26]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [3, 21], [3, 30]]]]], [], ['loc', [null, [3, 16], [3, 31]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [4, 20], [4, 28]]]]], [], ['loc', [null, [4, 15], [4, 29]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.sort-up').length);\n  });\n\n  (0, _emberQunit.test)('it should set sort-down on desc', function (assert) {\n    this.set('name', 'sort name');\n    this.set('direction', 'desc');\n    this.set('sortName', 'sort name');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [2, 21], [2, 25]]]]], [], ['loc', [null, [2, 11], [2, 26]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [3, 21], [3, 30]]]]], [], ['loc', [null, [3, 16], [3, 31]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [4, 20], [4, 28]]]]], [], ['loc', [null, [4, 15], [4, 29]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.sort-down').length);\n  });\n\n  (0, _emberQunit.test)('it shouldn\\'t on another sortName', function (assert) {\n    this.set('name', 'sort name');\n    this.set('direction', 'desc');\n    this.set('sortName', 'another sort name');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 5\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(' ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [2, 21], [2, 25]]]]], [], ['loc', [null, [2, 11], [2, 26]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [3, 21], [3, 30]]]]], [], ['loc', [null, [3, 16], [3, 31]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [4, 20], [4, 28]]]]], [], ['loc', [null, [4, 15], [4, 29]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.sort-up').length, 0, '- set sort-up');\n    assert.equal(this.$('.sort-down').length, 0, '- set sort-down');\n  });\n\n  (0, _emberQunit.test)('it shouldn on click', function (assert) {\n    this.set('name', 'sort name');\n    this.set('direction', 'desc');\n    this.set('sortName', 'another sort name');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          return morphs;\n        },\n        statements: [['inline', 'filter-sort', [], ['name', ['subexpr', 'readonly', [['get', 'name', ['loc', [null, [2, 23], [2, 27]]]]], [], ['loc', [null, [2, 13], [2, 28]]]], 'direction', ['subexpr', 'mut', [['get', 'direction', ['loc', [null, [3, 23], [3, 32]]]]], [], ['loc', [null, [3, 18], [3, 33]]]], 'sortName', ['subexpr', 'mut', [['get', 'sortName', ['loc', [null, [4, 22], [4, 30]]]]], [], ['loc', [null, [4, 17], [4, 31]]]]], ['loc', [null, [1, 0], [5, 6]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.notOk(this.$('.sort-up').length, '- not set sort-up before click');\n    assert.notEqual(this.get('sortName'), this.get('name'), '- sortName not equal name before click');\n\n    this.$('a').click();\n    assert.ok(this.$('.sort-up').length, '- set sort-up');\n    assert.equal(this.get('sortName'), this.get('name'), '- update sortName and equal name');\n    assert.equal(this.get('direction'), 'asc', '- set direction is asc');\n\n    this.$('a').click();\n    assert.ok(this.$('.sort-down').length, '- set sort-down');\n    assert.equal(this.get('direction'), 'desc', '- set direction is desc');\n  });\n});","define('frontend/tests/integration/pods/components/filter-sort/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-sort/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-sort/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-block/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-block', 'Integration | Component | filter toggle block', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'filter-toggle-block', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.6.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 3,\n                'column': 2\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('    template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'filter-toggle-block', [], [], 0, null, ['loc', [null, [1, 0], [3, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('it should on param isOpen', function (assert) {\n    this.set('isOpen', false);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-block', [], ['isOpen', ['subexpr', 'readonly', [['get', 'isOpen', ['loc', [null, [2, 23], [2, 29]]]]], [], ['loc', [null, [2, 13], [2, 30]]]]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('header.close').length, '- close if isOpen is false');\n    assert.ok(this.$('.hide').length, '- filter_toggle-block hide');\n\n    this.set('isOpen', true);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-block', [], ['isOpen', ['subexpr', 'readonly', [['get', 'isOpen', ['loc', [null, [2, 23], [2, 29]]]]], [], ['loc', [null, [2, 13], [2, 30]]]]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('header.open').length, '- open if isOpen is true');\n    assert.notOk(this.$('.hide').length, '- filter_toggle-block open');\n  });\n\n  (0, _emberQunit.test)('it should on click', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'filter-toggle-block', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('header.close').length, '- close before click');\n    assert.ok(this.$('.hide').length, '- filter_toggle-block hide before click');\n\n    this.$('header').click();\n    assert.ok(this.$('header.open').length, '- open on 1 click');\n    assert.notOk(this.$('.hide').length, '- filter_toggle-block open on 1 click');\n\n    this.$('header').click();\n    assert.ok(this.$('header.close').length, '- open on 2 click');\n    assert.ok(this.$('.hide').length, '- filter_toggle-block open on 2 click');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-block/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-block/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-block/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-memory/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-memory', 'Integration | Component | filter toggle memory', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.set('model', []);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-memory', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('ul'));\n  });\n\n  (0, _emberQunit.test)('it should open on checked', function (assert) {\n    this.set('model', [{ checked: true }]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-memory', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.open').length);\n  });\n\n  (0, _emberQunit.test)('it should close on not checked', function (assert) {\n    this.set('model', []);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 47\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-size', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 39], [1, 44]]]]], [], ['loc', [null, [1, 29], [1, 45]]]]], ['loc', [null, [1, 0], [1, 47]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n\n  (0, _emberQunit.test)('it should close on checked', function (assert) {\n    this.set('model', [{ checked: false }]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-memory', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n\n  (0, _emberQunit.test)('it should on click checkbox', function (assert) {\n    var done = assert.async();\n    var $input = undefined;\n\n    this.set('model', [{ name: 'test name', checked: false }]);\n\n    this.set('stub', function () {\n      assert.ok($input[0].checked, '- checked input');\n      done();\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-memory', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [2, 22], [2, 27]]]]], [], ['loc', [null, [2, 12], [2, 28]]]], 'setModel', ['subexpr', 'action', [['get', 'stub', ['loc', [null, [3, 23], [3, 27]]]]], [], ['loc', [null, [3, 15], [3, 28]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    $input = $(this.$('input'));\n    assert.notOk($input[0].checked, '- before click not checked');\n\n    $input.click();\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-memory/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-memory/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-memory/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-price/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-price', 'Integration | Component | filter toggle price', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'filter-toggle-price', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$('input[type=tel]').length, 2);\n  });\n\n  (0, _emberQunit.test)('it should open on checked', function (assert) {\n    this.set('model', [{ length: 1 }]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 48\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-price', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 40], [1, 45]]]]], [], ['loc', [null, [1, 30], [1, 46]]]]], ['loc', [null, [1, 0], [1, 48]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.open').length);\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-price/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-price/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-price/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-size/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-size', 'Integration | Component | filter toggle size', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'filter-toggle-price', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$('input[type=tel]').length, 2);\n  });\n\n  (0, _emberQunit.test)('it should open on checked', function (assert) {\n    this.set('model', [{}]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 47\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-size', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 39], [1, 44]]]]], [], ['loc', [null, [1, 29], [1, 45]]]]], ['loc', [null, [1, 0], [1, 47]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.open').length);\n  });\n\n  (0, _emberQunit.test)('it should close on not checked', function (assert) {\n    this.set('model', []);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 47\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-size', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 39], [1, 44]]]]], [], ['loc', [null, [1, 29], [1, 45]]]]], ['loc', [null, [1, 0], [1, 47]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-size/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-size/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-size/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-ssd/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-ssd', 'Integration | Component | filter toggle ssd', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'filter-toggle-ssd', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$('input[type=radio]').length, 2);\n  });\n\n  (0, _emberQunit.test)('it should open on checked', function (assert) {\n    this.set('model', true);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-ssd', [], ['model', ['subexpr', 'mut', [['get', 'model', ['loc', [null, [1, 33], [1, 38]]]]], [], ['loc', [null, [1, 28], [1, 39]]]]], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.open').length);\n  });\n\n  (0, _emberQunit.test)('it should close on not checked', function (assert) {\n    this.set('model', false);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-ssd', [], ['model', ['subexpr', 'mut', [['get', 'model', ['loc', [null, [1, 33], [1, 38]]]]], [], ['loc', [null, [1, 28], [1, 39]]]]], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n\n  (0, _emberQunit.test)('it should update model on click', function (assert) {\n    this.set('model', true);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-ssd', [], ['model', ['subexpr', 'mut', [['get', 'model', ['loc', [null, [1, 33], [1, 38]]]]], [], ['loc', [null, [1, 28], [1, 39]]]]], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('input[name=false]').click();\n    assert.equal(this.$('input[name=true]')[0].checked, false, '- input[name=true] is false');\n    assert.equal(this.$('input[name=false]')[0].checked, true, '- input[name=false] is true');\n    assert.equal(this.get('model'), false, '- set model false');\n\n    this.$('input[name=true]').click();\n    assert.equal(this.$('input[name=true]')[0].checked, true, '- input[name=true] is true');\n    assert.equal(this.$('input[name=false]')[0].checked, false, '- input[name=false] is false');\n    assert.equal(this.get('model'), true, '- set model true');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-ssd/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-ssd/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-ssd/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-vendor/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('filter-toggle-vendor', 'Integration | Component | filter toggle vendor', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.set('model', []);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 47\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-vendor', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 39], [1, 44]]]]], [], ['loc', [null, [1, 29], [1, 45]]]]], ['loc', [null, [1, 0], [1, 47]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('ul'));\n  });\n\n  (0, _emberQunit.test)('it should open on checked', function (assert) {\n    this.set('model', [{ checked: true }]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-vendor', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.open').length);\n  });\n\n  (0, _emberQunit.test)('it should close on not checked', function (assert) {\n    this.set('model', []);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-vendor', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n\n  (0, _emberQunit.test)('it should close on checked', function (assert) {\n    this.set('model', [{ checked: false }]);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-vendor', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [1, 41], [1, 46]]]]], [], ['loc', [null, [1, 31], [1, 47]]]]], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.close').length);\n  });\n\n  (0, _emberQunit.test)('it should on click checkbox', function (assert) {\n    var done = assert.async();\n    var $input = undefined;\n\n    this.set('model', [{ name: 'test name', checked: false }]);\n\n    this.set('stub', function () {\n      assert.ok($input[0].checked, '- checked input');\n      done();\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'filter-toggle-vendor', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [2, 22], [2, 27]]]]], [], ['loc', [null, [2, 12], [2, 28]]]], 'setModel', ['subexpr', 'action', [['get', 'stub', ['loc', [null, [3, 23], [3, 27]]]]], [], ['loc', [null, [3, 15], [3, 28]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    $input = $(this.$('input'));\n    assert.notOk($input[0].checked, '- before click not checked');\n\n    $input.click();\n  });\n});","define('frontend/tests/integration/pods/components/filter-toggle-vendor/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/filter-toggle-vendor/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/filter-toggle-vendor/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-ballons/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-ballons', 'Integration | Component | product ballons', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product-ballons', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.product-ballon-list').length);\n  });\n\n  (0, _emberQunit.test)('it should show novelty', function (assert) {\n    this.set('stub', true);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-ballons', [], ['isNovelty', ['subexpr', 'readonly', [['get', 'stub', ['loc', [null, [2, 26], [2, 30]]]]], [], ['loc', [null, [2, 16], [2, 31]]]]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'НОВИНКА');\n  });\n\n  (0, _emberQunit.test)('it should show bestseller', function (assert) {\n    this.set('stub', true);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-ballons', [], ['isBestseller', ['subexpr', 'readonly', [['get', 'stub', ['loc', [null, [2, 29], [2, 33]]]]], [], ['loc', [null, [2, 19], [2, 34]]]]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'ХИТ');\n  });\n});","define('frontend/tests/integration/pods/components/product-ballons/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-ballons/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-ballons/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-filter/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-filter', 'Integration | Component | product filter', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.set('price', []);\n      this.set('size', []);\n      this.set('memoryList', []);\n      this.set('vendorList', []);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-filter', [], ['ssd', ['subexpr', 'mut', [['get', 'ssd', ['loc', [null, [2, 15], [2, 18]]]]], [], ['loc', [null, [2, 10], [2, 19]]]], 'price', ['subexpr', 'mut', [['get', 'price', ['loc', [null, [3, 17], [3, 22]]]]], [], ['loc', [null, [3, 12], [3, 23]]]], 'size', ['subexpr', 'mut', [['get', 'size', ['loc', [null, [4, 16], [4, 20]]]]], [], ['loc', [null, [4, 11], [4, 21]]]], 'setMemory', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'memory', ['loc', [null, [5, 29], [5, 35]]]]], [], ['loc', [null, [5, 24], [5, 36]]]]], [], ['loc', [null, [5, 16], [5, 37]]]], 'memoryList', ['subexpr', 'readonly', [['get', 'memoryList', ['loc', [null, [6, 27], [6, 37]]]]], [], ['loc', [null, [6, 17], [6, 38]]]], 'setVendor', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'vendor', ['loc', [null, [7, 29], [7, 35]]]]], [], ['loc', [null, [7, 24], [7, 36]]]]], [], ['loc', [null, [7, 16], [7, 37]]]], 'vendorList', ['subexpr', 'readonly', [['get', 'vendorList', ['loc', [null, [8, 27], [8, 37]]]]], [], ['loc', [null, [8, 17], [8, 38]]]]], ['loc', [null, [1, 0], [9, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.product-filter').length);\n  });\n\n  (0, _emberQunit.test)('it should contain', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-filter', [], ['ssd', ['subexpr', 'mut', [['get', 'ssd', ['loc', [null, [2, 15], [2, 18]]]]], [], ['loc', [null, [2, 10], [2, 19]]]], 'price', ['subexpr', 'mut', [['get', 'price', ['loc', [null, [3, 17], [3, 22]]]]], [], ['loc', [null, [3, 12], [3, 23]]]], 'size', ['subexpr', 'mut', [['get', 'size', ['loc', [null, [4, 16], [4, 20]]]]], [], ['loc', [null, [4, 11], [4, 21]]]], 'setMemory', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'memory', ['loc', [null, [5, 29], [5, 35]]]]], [], ['loc', [null, [5, 24], [5, 36]]]]], [], ['loc', [null, [5, 16], [5, 37]]]], 'memoryList', ['subexpr', 'readonly', [['get', 'memoryList', ['loc', [null, [6, 27], [6, 37]]]]], [], ['loc', [null, [6, 17], [6, 38]]]], 'setVendor', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'vendor', ['loc', [null, [7, 29], [7, 35]]]]], [], ['loc', [null, [7, 24], [7, 36]]]]], [], ['loc', [null, [7, 16], [7, 37]]]], 'vendorList', ['subexpr', 'readonly', [['get', 'vendorList', ['loc', [null, [8, 27], [8, 37]]]]], [], ['loc', [null, [8, 17], [8, 38]]]]], ['loc', [null, [1, 0], [9, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var text = this.$('.product-filter').text();\n    assert.ok(/Производитель/.test(text), '- filter vendor');\n    assert.ok(/Цена, руб./.test(text), '- filter price');\n    assert.ok(/Диагональ экрана, дюймы/.test(text), '- filter size');\n    assert.ok(/Размер оперативной памяти/.test(text), '- filter memory');\n    assert.ok(/Наличие SSD/.test(text), '- filter ssd');\n  });\n});","define('frontend/tests/integration/pods/components/product-filter/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-filter/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-filter/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-list/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-list', 'Integration | Component | product list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product-list', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.product-list').length);\n  });\n\n  (0, _emberQunit.test)('it should show product item', function (assert) {\n    this.set('model', [{}]);\n\n    this.set('stub', function () {});\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-list', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [2, 22], [2, 27]]]]], [], ['loc', [null, [2, 12], [2, 28]]]], 'addToBasket', ['subexpr', 'action', [['get', 'stub', ['loc', [null, [3, 26], [3, 30]]]]], [], ['loc', [null, [3, 18], [3, 31]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.product__4x').length);\n  });\n\n  (0, _emberQunit.test)('it should show divider product item', function (assert) {\n    this.set('model', [{}, {}, {}, {}, {}]);\n\n    this.set('stub', function () {});\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-list', [], ['model', ['subexpr', 'readonly', [['get', 'model', ['loc', [null, [2, 22], [2, 27]]]]], [], ['loc', [null, [2, 12], [2, 28]]]], 'addToBasket', ['subexpr', 'action', [['get', 'stub', ['loc', [null, [3, 26], [3, 30]]]]], [], ['loc', [null, [3, 18], [3, 31]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.product__line').length);\n  });\n});","define('frontend/tests/integration/pods/components/product-list/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-list/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-list/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-list-item/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-list-item', 'Integration | Component | product list item', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.set('product', {});\n      this.set('addToBasket', function () {});\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-list-item', [], ['product', ['subexpr', 'readonly', [['get', 'product', ['loc', [null, [2, 24], [2, 31]]]]], [], ['loc', [null, [2, 14], [2, 32]]]], 'addToBasket', ['subexpr', 'action', [['get', 'addToBasket', ['loc', [null, [3, 26], [3, 37]]]]], [], ['loc', [null, [3, 18], [3, 38]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.product__4x').length);\n  });\n\n  (0, _emberQunit.test)('it should send action on click btn add basket', function (assert) {\n    var done = assert.async();\n\n    this.set('addToBasket', function () {\n      assert.ok(true);\n      done();\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-list-item', [], ['product', ['subexpr', 'readonly', [['get', 'product', ['loc', [null, [2, 24], [2, 31]]]]], [], ['loc', [null, [2, 14], [2, 32]]]], 'addToBasket', ['subexpr', 'action', [['get', 'addToBasket', ['loc', [null, [3, 26], [3, 37]]]]], [], ['loc', [null, [3, 18], [3, 38]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('a.product--basket__btn').click();\n  });\n});","define('frontend/tests/integration/pods/components/product-list-item/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-list-item/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-list-item/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-nav/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-nav', 'Integration | Component | product nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product-nav', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.product-nav').length);\n  });\n\n  (0, _emberQunit.test)('it should show', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product-nav', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var text = this.$('.product-nav').text();\n    assert.ok(/новинкам/i.test(text), '- filter novelity');\n    assert.ok(/цене/i.test(text), '- filter price');\n    assert.ok(/популярности/i.test(text), '- filter bestseller');\n    assert.ok(/В наличии/i.test(text), '- filter inStock');\n  });\n\n  (0, _emberQunit.test)('it should send action toggle inStock param', function (assert) {\n    this.set('inStock', false);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 37\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-nav', [], ['inStock', ['subexpr', 'mut', [['get', 'inStock', ['loc', [null, [1, 27], [1, 34]]]]], [], ['loc', [null, [1, 22], [1, 35]]]]], ['loc', [null, [1, 0], [1, 37]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    $(this.$('input[type=checkbox]')).click();\n    assert.equal(this.get('inStock'), true, '- set to true on 1 click');\n\n    $(this.$('input[type=checkbox]')).click();\n    assert.equal(this.get('inStock'), false, '- set to false on 2 click');\n  });\n});","define('frontend/tests/integration/pods/components/product-nav/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-nav/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-nav/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/pods/components/product-rating/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('product-rating', 'Integration | Component | product rating', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'product-rating', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.product-rating').length);\n  });\n\n  (0, _emberQunit.test)('it should set rating', function (assert) {\n    var stub = 4;\n    this.set('rating', stub);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-rating', [], ['rating', ['subexpr', 'readonly', [['get', 'rating', ['loc', [null, [1, 34], [1, 40]]]]], [], ['loc', [null, [1, 24], [1, 41]]]]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$('.product-rating--stars__' + stub).length);\n  });\n\n  (0, _emberQunit.test)('it should set link to review', function (assert) {\n    this.set('review', 'test review');\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'product-rating', [], ['review', ['subexpr', 'readonly', [['get', 'review', ['loc', [null, [1, 34], [1, 40]]]]], [], ['loc', [null, [1, 24], [1, 41]]]]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'test review');\n  });\n});","define('frontend/tests/integration/pods/components/product-rating/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/product-rating/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/product-rating/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/models/notebook.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/notebook.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/notebook.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/app-input/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/app-input/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/app-input/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/app-pagination/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/app-pagination/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/app-pagination/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-sort/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-sort/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-sort/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-block/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-block/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-block/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-memory/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-memory/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-memory/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-price/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-price/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-price/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-size/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-size/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-size/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-ssd/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-ssd/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-ssd/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/filter-toggle-vendor/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/filter-toggle-vendor/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/filter-toggle-vendor/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-ballons/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-ballons/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-ballons/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-filter/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-filter/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-filter/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-list/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-list/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-list/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-list-item/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-list-item/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-list-item/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-nav/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-nav/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-nav/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/components/product-rating/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/product-rating/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/product-rating/component.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/index/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/index/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/controller.js should pass jshint.');\n  });\n});","define('frontend/tests/pods/index/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/route.js should pass jshint.');\n  });\n});","define('frontend/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('frontend/tests/test-helper', ['exports', 'frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _frontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_frontendTestsHelpersResolver['default']);\n});","define('frontend/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  var NAMESPACE = 'api';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  (0, _emberQunit.test)('it should have namespace', function (assert) {\n    var adapter = this.subject();\n    assert.equal(adapter.get('namespace'), NAMESPACE, '- NAMESPACE');\n  });\n});","define('frontend/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/format-currency-test', ['exports', 'frontend/helpers/format-currency', 'qunit'], function (exports, _frontendHelpersFormatCurrency, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | format currency');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersFormatCurrency.formatCurrency)([1000]);\n    assert.equal(result, '1 000');\n  });\n\n  (0, _qunit.test)('it should foram nuber like currency', function (assert) {\n    var result = (0, _frontendHelpersFormatCurrency.formatCurrency)([1000000]);\n    assert.equal(result, '1 000 000');\n  });\n});","define('frontend/tests/unit/helpers/format-currency-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/format-currency-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/format-currency-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/is-equal-by-modul-test', ['exports', 'frontend/helpers/is-equal-by-modul', 'qunit'], function (exports, _frontendHelpersIsEqualByModul, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is equal by modul');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersIsEqualByModul.isEqualByModul)([8, 4]);\n    assert.ok(result);\n  });\n\n  (0, _qunit.test)('it should equal by modul', function (assert) {\n    var result = (0, _frontendHelpersIsEqualByModul.isEqualByModul)([20, 5]);\n    assert.equal(result, true);\n  });\n\n  (0, _qunit.test)('it shouldn\\'t equal by modul', function (assert) {\n    var result = (0, _frontendHelpersIsEqualByModul.isEqualByModul)([20, 6]);\n    assert.equal(result, false);\n  });\n});","define('frontend/tests/unit/helpers/is-equal-by-modul-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-equal-by-modul-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-equal-by-modul-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/models/notebook-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('notebook', 'Unit | Model | notebook', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('frontend/tests/unit/models/notebook-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/notebook-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/notebook-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/pods/index/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('it should set totalPages from meta', function (assert) {\n    var controller = this.subject({ count: 10, meta: { total: 17 } });\n    assert.equal(controller.get('totalPages'), 2, '- some pages');\n  });\n\n  (0, _emberQunit.test)('it should set totalPages is 1 from meta', function (assert) {\n    var controller = this.subject({ count: 10, meta: { total: 0 } });\n    assert.equal(controller.get('totalPages'), 1, '- one page if total is 0');\n  });\n\n  (0, _emberQunit.test)('it should show paginator', function (assert) {\n    var controller = this.subject({ count: 10, meta: { total: 11 } });\n    assert.equal(controller.get('isShowPagination'), true);\n  });\n\n  (0, _emberQunit.test)('it should hide paginator on empty models', function (assert) {\n    var controller = this.subject({ count: 10, meta: { total: 0 } });\n    assert.equal(controller.get('isShowPagination'), false);\n  });\n\n  (0, _emberQunit.test)('it should hide paginator', function (assert) {\n    var controller = this.subject({ count: 10, meta: { total: 9 } });\n    assert.equal(controller.get('isShowPagination'), false);\n  });\n\n  (0, _emberQunit.test)('it should set memoryList from meta', function (assert) {\n    var meta = { memorys: ['test'] };\n    var expect = [{ name: 'test', checked: false }];\n    var controller = this.subject({ meta: meta });\n    assert.deepEqual(controller.get('memoryList'), expect);\n  });\n\n  (0, _emberQunit.test)('it should set checked memoryList from meta is in queryParams', function (assert) {\n    var memory = ['test 1'];\n    var meta = { memorys: ['test 1', 'test 2'] };\n    var expect = [{ name: 'test 1', checked: true }, { name: 'test 2', checked: false }];\n\n    var controller = this.subject({ meta: meta, memory: memory });\n    assert.deepEqual(controller.get('memoryList'), expect);\n  });\n\n  (0, _emberQunit.test)('it should set vendorList from meta', function (assert) {\n    var meta = { vendors: [{ name: 'test', count: 10 }] };\n    var expect = [{ name: 'test', count: 10, checked: false }];\n    var controller = this.subject({ meta: meta });\n    assert.deepEqual(controller.get('vendorList'), expect);\n  });\n\n  (0, _emberQunit.test)('it should set checked vendorList from meta is in queryParams', function (assert) {\n    var vendor = ['test'];\n    var meta = { vendors: [{ name: 'test', count: 10 }] };\n    var expect = [{ name: 'test', count: 10, checked: true }];\n    var controller = this.subject({ meta: meta, vendor: vendor });\n    assert.deepEqual(controller.get('vendorList'), expect);\n  });\n\n  (0, _emberQunit.test)('it should add product to basket', function (assert) {\n    var done = assert.async();\n    var controller = this.subject();\n\n    var cachedAlert = window.alert;\n    var product = { model: 'test product' };\n\n    window.alert = function (expect) {\n      assert.equal(expect, 'Product \"' + product.model + '\" add to Your basket');\n      done();\n    };\n\n    controller.send('addToBasket', product);\n\n    window.alert = cachedAlert;\n  });\n});","define('frontend/tests/unit/pods/index/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/index/controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/index/controller-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/pods/index/route-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('it should setup controller', function (assert) {\n    var route = this.subject();\n    var controller = _ember['default'].Object.create();\n    var meta = { name: 'test meta' };\n    var model = _ember['default'].Object.create({ meta: meta });\n\n    route.setupController(controller, model);\n\n    assert.deepEqual(controller.get('model'), model, '- set model');\n    assert.deepEqual(controller.get('meta'), meta, '- set meta');\n  });\n\n  (0, _emberQunit.test)('it should refresh route on change query params', function (assert) {\n    var done = assert.async();\n\n    var refresh = function refresh() {\n      assert.ok(true);\n      done();\n    };\n\n    var route = this.subject({ refresh: refresh });\n    route.send('queryParamsDidChange');\n  });\n});","define('frontend/tests/unit/pods/index/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/index/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/index/route-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/utils/input-tel-test', ['exports', 'frontend/utils/input-tel', 'qunit'], function (exports, _frontendUtilsInputTel, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | input tel', {\n    beforeEach: function beforeEach() {\n      var input = document.createElement('INPUT');\n      input.type = 'tel';\n      this.$input = $(input);\n    },\n\n    afterEach: function afterEach() {\n      this.$input = null;\n    }\n  });\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendUtilsInputTel['default'])(this.$input);\n    assert.ok(result);\n  });\n\n  (0, _qunit.test)('it should set number on key-press in input', function (assert) {\n    var result = (0, _frontendUtilsInputTel.isNumberKeyCode)({ keyCode: '3'.charCodeAt() });\n    assert.equal(result, true);\n  });\n\n  (0, _qunit.test)('it shouldn\\'t set char on key-press in input', function (assert) {\n    var result = (0, _frontendUtilsInputTel.isNumberKeyCode)({ keyCode: 'A'.charCodeAt() });\n    assert.equal(result, false);\n  });\n});\n/* global $ */","define('frontend/tests/unit/utils/input-tel-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/input-tel-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/input-tel-test.js should pass jshint.');\n  });\n});","define('frontend/tests/utils/input-tel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/input-tel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/input-tel.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrjlhjhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhxzjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}